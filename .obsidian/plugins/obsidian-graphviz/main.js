/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GraphvizPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/setting.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  dotPath: "dot",
  renderer: "dot",
  imageFormat: "png"
};
var GraphvizSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Graphviz renderer").setDesc("Please choose the Graphviz renderer, after that, you will need to restart obsidian.").addDropdown((dropdown) => dropdown.addOption("dot", "dot").addOption("d3_graphviz", "D3 Graphviz (experimental)").setValue(this.plugin.settings.renderer).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.renderer = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Dot Path").setDesc("Dot executable path").addText(
      (text) => text.setPlaceholder(DEFAULT_SETTINGS.dotPath).setValue(this.plugin.settings.dotPath).onChange(
        (value) => __async(this, null, function* () {
          this.plugin.settings.dotPath = value;
          yield this.plugin.saveSettings();
        })
      )
    );
    new import_obsidian.Setting(containerEl).setName("Image format").setDesc("Graphviz output format.").addDropdown((dropdown) => dropdown.addOption("png", "png").addOption("svg", "svg").setValue(this.plugin.settings.imageFormat).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.imageFormat = value;
      yield this.plugin.saveSettings();
    })));
  }
};

// src/processors.ts
var os = __toESM(require("os"));
var path = __toESM(require("path"));
var fs = __toESM(require("fs"));
var import_child_process = require("child_process");
var import_crypto = require("crypto");
var crypto = __toESM(require("crypto"));
var md5 = (contents) => crypto.createHash("md5").update(contents).digest("hex");
var Processors = class {
  constructor(plugin) {
    this.imageMimeType = /* @__PURE__ */ new Map([
      ["png", "image/png"],
      ["svg", "image/svg+xml"]
    ]);
    this.plugin = plugin;
  }
  writeDotFile(sourceFile) {
    return __async(this, null, function* () {
      return new Promise((resolve, reject) => {
        const cmdPath = this.plugin.settings.dotPath;
        const imageFormat = this.plugin.settings.imageFormat;
        const out = `${sourceFile}.${imageFormat}`;
        if (fs.existsSync(out)) {
          return resolve(out);
        }
        const parameters = [`-T${imageFormat}`, sourceFile, "-o", out];
        console.debug(`Starting dot process ${cmdPath}, ${parameters}`);
        const dotProcess = (0, import_child_process.spawn)(cmdPath, parameters);
        let errData = "";
        dotProcess.stderr.on("data", (data) => {
          errData += data;
        });
        dotProcess.stdin.end();
        dotProcess.on("exit", (code) => {
          if (code !== 0) {
            return reject(`"${cmdPath} ${parameters}" failed, error code: ${code}, stderr: ${errData}`);
          }
          return resolve(out);
        });
        dotProcess.on("error", (err) => reject(`"${cmdPath} ${parameters}" failed, ${err}`));
      });
    });
  }
  convertToImage(source) {
    return __async(this, null, function* () {
      const self = this;
      const dir = path.join(os.tmpdir(), "obsidian-dot");
      const file = path.join(dir, md5(source));
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir);
      }
      if (!fs.existsSync(file)) {
        fs.writeFileSync(file, source);
      }
      return self.writeDotFile(file);
    });
  }
  imageProcessor(source, el, _) {
    return __async(this, null, function* () {
      try {
        console.debug("Call image processor");
        if (source.trimEnd().at(-1) != "}") {
          console.error("Bad dot source, won't render");
          return;
        }
        const imagePath = yield this.convertToImage(source);
        const img = document.createElement("img");
        img.src = `app://local${imagePath}`;
        el.appendChild(img);
      } catch (errMessage) {
        console.error("convert to image error: " + errMessage);
        const pre = document.createElement("pre");
        const code = document.createElement("code");
        pre.appendChild(code);
        code.setText(errMessage);
        el.appendChild(pre);
      }
    });
  }
  d3graphvizProcessor(source, el, _) {
    return __async(this, null, function* () {
      console.debug("Call d3graphvizProcessor");
      const div = document.createElement("div");
      const graphId = "d3graph_" + (0, import_crypto.createHash)("md5").update(source).digest("hex").substring(0, 6);
      div.setAttr("id", graphId);
      div.setAttr("style", "text-align: center");
      el.appendChild(div);
      const script = document.createElement("script");
      const escapedSource = source.replaceAll("\\", "\\\\").replaceAll("`", "\\`");
      script.text = `if( typeof d3 != 'undefined') { 
        d3.select("#${graphId}").graphviz()
        .onerror(d3error)
       .renderDot(\`${escapedSource}\`);
    }
    function d3error (err) {
        d3.select("#${graphId}").html(\`<div class="d3graphvizError"> d3.graphviz(): \`+err.toString()+\`</div>\`);
        console.error('Caught error on ${graphId}: ', err);
    }`;
      el.appendChild(script);
    });
  }
};

// src/main.ts
var GraphvizPlugin = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.debug("Load graphviz plugin");
      yield this.loadSettings();
      this.addSettingTab(new GraphvizSettingsTab(this));
      const processors = new Processors(this);
      const d3Sources = [
        "https://d3js.org/d3.v5.min.js",
        "https://unpkg.com/@hpcc-js/wasm@0.3.11/dist/index.min.js",
        "https://unpkg.com/d3-graphviz@3.0.5/build/d3-graphviz.js"
      ];
      this.app.workspace.onLayoutReady(() => {
        switch (this.settings.renderer) {
          case "d3_graphviz":
            for (const src of d3Sources) {
              const script = document.createElement("script");
              script.src = src;
              (document.head || document.documentElement).appendChild(script);
            }
            this.registerMarkdownCodeBlockProcessor("dot", processors.d3graphvizProcessor.bind(processors));
            break;
          default:
            this.registerMarkdownCodeBlockProcessor("dot", processors.imageProcessor.bind(processors));
        }
      });
    });
  }
  onunload() {
    console.debug("Unload graphviz plugin");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
      return Promise.resolve();
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
