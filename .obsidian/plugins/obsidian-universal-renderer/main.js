/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GraphvizPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/setting.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  dotPath: "dot",
  pdflatexPath: "pdflatex",
  imageMagickConvertPath: "convert",
  ditaaPath: "ditaa"
};
var GraphvizSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    let setting;
    for (setting in DEFAULT_SETTINGS) {
      new import_obsidian.Setting(containerEl).setName(setting).addText(
        (text) => text.setPlaceholder(DEFAULT_SETTINGS[setting]).setValue(this.plugin.settings[setting]).onChange(
          (value) => __async(this, null, function* () {
            this.plugin.settings[setting] = value;
            yield this.plugin.saveSettings();
          })
        )
      );
    }
  }
};

// src/processors.ts
var os = __toESM(require("os"));
var path = __toESM(require("path"));
var fs = __toESM(require("fs"));
var import_child_process = require("child_process");
var crypto = __toESM(require("crypto"));
var md5 = (contents) => crypto.createHash("md5").update(contents).digest("hex");
var Processors = class {
  constructor(plugin) {
    this.pluginSettings = plugin.settings;
    this.renderTypeMapping = /* @__PURE__ */ new Map([
      ["latex", this.latexProcessor],
      ["dot", this.dotProcessor],
      ["ditaa", this.ditaaProcessor]
    ]);
  }
  getRendererParameters(type, sourceFile) {
    let outputFile;
    switch (type) {
      case "dot":
        outputFile = `${sourceFile}.svg`;
        return [this.pluginSettings.dotPath, outputFile, ["-Tsvg", sourceFile, "-o", outputFile]];
      case "latex":
        outputFile = `${sourceFile}.png`;
        return [this.pluginSettings.pdflatexPath, outputFile, ["-shell-escape", "-output-directory", this.getTempDir(type), sourceFile]];
      case "ditaa":
        outputFile = `${sourceFile}.svg`;
        return [this.pluginSettings.ditaaPath, outputFile, [sourceFile, "--transparent", "--svg", "--overwrite"]];
    }
  }
  spawnProcess(cmdPath, parameters) {
    return new Promise((resolve, reject) => {
      console.debug(`Starting external process ${cmdPath}, ${parameters}`);
      const process = (0, import_child_process.spawn)(cmdPath, parameters);
      let errData = "";
      process.stderr.on("data", (data) => {
        errData += data;
      });
      process.on("error", (err) => reject(`"${cmdPath} ${parameters}" failed, ${err}`));
      process.stdin.end();
      process.on("exit", (code) => {
        if (code !== 0) {
          return reject(`"${cmdPath} ${parameters}" failed, error code: ${code}, stderr: ${errData}`);
        }
        resolve("ok");
      });
    });
  }
  writeRenderedFile(sourceFile, type) {
    return __async(this, null, function* () {
      const [cmdPath, outputFile, params] = this.getRendererParameters(type, sourceFile);
      if (fs.existsSync(outputFile)) {
        return outputFile;
      }
      yield this.spawnProcess(cmdPath, params);
      if (type === "latex") {
        yield this.spawnProcess(this.pluginSettings.imageMagickConvertPath, ["-density", "300", "-units", "PixelsPerInch", `${sourceFile}.pdf[0]`, outputFile]);
      }
      return outputFile;
    });
  }
  getTempDir(type) {
    return path.join(os.tmpdir(), `obsidian-${type}`);
  }
  preprocessSource(type, source) {
    switch (type) {
      case "dot":
        return source.replaceAll("color=brightwhite", 'color="#FBF1C7"').replaceAll("color=white", 'color="#EBDBB2"').replaceAll("color=lightgray", 'color="#BDAE93"').replaceAll("color=gray", 'color="#928374"').replaceAll("color=darkgray", 'color="#665C54').replaceAll("color=green", 'color="#b8bb26"').replaceAll("color=darkgreen", 'color="#98971A"').replaceAll("color=aqua", 'color="#8ec07c"').replaceAll("color=darkaqua", 'color="#689D6A"').replaceAll("color=red", 'color="#fb4934"').replaceAll("color=darkred", 'color="#CC241D"').replaceAll("color=yellow", 'color="#fabd2f"').replaceAll("color=darkyellow", 'color="#D79921"').replaceAll("color=blue", 'color="#83a598"').replaceAll("color=darkblue", 'color="#458588"').replaceAll("color=purple", 'color="#D3869B"').replaceAll("color=darkpurple", 'color="#B16286"').replaceAll("color=orange", 'color="#FE8019"').replaceAll("color=darkorange", 'color="#D65D0E"');
    }
  }
  convertToImage(type, source) {
    return __async(this, null, function* () {
      const dir = this.getTempDir(type);
      const file = path.join(dir, md5(source));
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir);
      }
      if (!fs.existsSync(file)) {
        fs.writeFileSync(file, this.preprocessSource(type, source));
      }
      return this.writeRenderedFile(file, type);
    });
  }
  imageProcessor(source, el, _, type) {
    return __async(this, null, function* () {
      try {
        console.debug(`Call image processor for ${type}`);
        if (type === "dot" && source.trimEnd().at(-1) != "}") {
          console.error("Bad source, won't render");
          return;
        }
        const imagePath = yield this.convertToImage(type, source);
        const img = document.createElement("img");
        img.src = `app://local${imagePath}`;
        el.appendChild(img);
      } catch (errMessage) {
        console.error("convert to image error: " + errMessage);
        const pre = document.createElement("pre");
        const code = document.createElement("code");
        pre.appendChild(code);
        code.setText(errMessage);
        el.appendChild(pre);
      }
    });
  }
  ditaaProcessor(source, el, _) {
    return __async(this, null, function* () {
      return this.imageProcessor(source, el, _, "ditaa");
    });
  }
  dotProcessor(source, el, _) {
    return __async(this, null, function* () {
      return this.imageProcessor(source, el, _, "dot");
    });
  }
  latexProcessor(source, el, _) {
    return __async(this, null, function* () {
      return this.imageProcessor(source, el, _, "latex");
    });
  }
};

// src/main.ts
var GraphvizPlugin = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.debug("Load universal renderer plugin");
      yield this.loadSettings();
      this.addSettingTab(new GraphvizSettingsTab(this));
      const processors = new Processors(this);
      this.app.workspace.onLayoutReady(() => {
        for (const [type, func] of processors.renderTypeMapping) {
          this.registerMarkdownCodeBlockProcessor(type, func.bind(processors));
        }
      });
    });
  }
  onunload() {
    console.debug("Unload universal renderer plugin");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
      return Promise.resolve();
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
