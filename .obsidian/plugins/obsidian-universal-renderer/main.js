/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GraphvizPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/setting.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  dotPath: "dot",
  pdflatexPath: "pdflatex",
  pdf2svgPath: "pdf2svg",
  blockdiagPath: "blockdiag",
  ditaaPath: "ditaa"
};
var GraphvizSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    let setting;
    for (setting in DEFAULT_SETTINGS) {
      new import_obsidian.Setting(containerEl).setName(setting).addText(
        (text) => text.setPlaceholder(DEFAULT_SETTINGS[setting]).setValue(this.plugin.settings[setting]).onChange(
          (value) => __async(this, null, function* () {
            this.plugin.settings[setting] = value;
            yield this.plugin.saveSettings();
          })
        )
      );
    }
  }
};

// src/processors.ts
var os = __toESM(require("os"));
var path = __toESM(require("path"));
var fs = __toESM(require("fs"));
var import_child_process = require("child_process");
var crypto = __toESM(require("crypto"));
var md5 = (contents) => crypto.createHash("md5").update(contents).digest("hex");
var svgColorMap = /* @__PURE__ */ new Map([
  // dark colors
  ["darkred", "--g-color-dark-red"],
  ["firebrick", "--g-color-dark-red"],
  ["maroon", "--g-color-dark-red"],
  ["brown", "--g-color-dark-red"],
  ["darkred", "--g-color-dark-red"],
  ["darkmagenta", "--g-color-dark-purple"],
  ["darkviolet", "--g-color-dark-purple"],
  ["blueviolet", "--g-color-dark-purple"],
  ["darkorchid", "--g-color-dark-purple"],
  ["indigo", "--g-color-dark-purple"],
  ["darkgreen", "--g-color-dark-green"],
  ["darkblue", "--g-color-dark-blue"],
  ["chocolate", "--g-color-dark-orange"],
  ["goldenrod", "--g-color-dark-yellow"],
  ["darkcyan", "--g-color-dark-aqua"],
  // neutral colors
  ["red", "--g-color-red"],
  ["purple", "--g-color-purple"],
  ["green", "--g-color-green"],
  ["blue", "--g-color-blue"],
  ["darkorange", "--g-color-orange"],
  ["yellow", "--g-color-yellow"],
  ["cyan", "--g-color-aqua"],
  // light colors
  ["tomato", "--g-color-light-red"],
  ["lightcoral", "--g-color-light-red"],
  ["indianred", "--g-color-light-red"],
  ["magenta", "--g-color-light-purple"],
  ["lightgreen", "--g-color-light-green"],
  ["lightblue", "--g-color-light-blue"],
  ["orange", "--g-color-light-orange"],
  ["coral", "--g-color-light-orange"],
  ["gold", "--g-color-light-yellow"],
  ["cyan", "--g-color-light-aqua"],
  // gray colors
  ["ghostwhite", "--g-color-light100-hard"],
  // #F9F5D7
  ["white", "--g-color-light100"],
  // #FBF1C7
  ["seashell", "--g-color-light100-soft"],
  // #F2E5BC
  ["snow", "--g-color-light90"],
  // #EBDBB2                    
  ["whitesmoke", "--g-color-light80"],
  // #D5C4A1
  ["lightgray", "--g-color-light70"],
  // #BDAE93
  ["silver", "--g-color-light60"],
  // #A89984
  //['--g-color-dark100-hard']               // #1D2021 unused
  ["black", "--g-color-dark100"],
  // #282828
  ["dimgray", "--g-color-dark100-soft"],
  // #32302F
  ["darkslategray", "--g-color-dark90"],
  // #3C3836
  ["slategray", "--g-color-dark80"],
  // #504945
  ["lightslategray", "--g-color-dark70"],
  // #665C54
  ["gray", "--g-color-dark60"],
  // #7C6F64
  ["darkgray", "--g-color-gray"]
  // #928374
]);
var Processors = class {
  constructor(plugin) {
    this.referenceGraphMap = /* @__PURE__ */ new Map();
    this.pluginSettings = plugin.settings;
    this.renderTypeMapping = /* @__PURE__ */ new Map([
      ["latex", this.latexProcessor],
      ["dot", this.dotProcessor],
      ["ditaa", this.ditaaProcessor],
      ["blockdiag", this.blockdiagProcessor],
      ["refgraph", this.refgraphProcessor]
    ]);
  }
  getRendererParameters(type, sourceFile, outputFile) {
    switch (type) {
      case "dot":
        return [this.pluginSettings.dotPath, ["-Tsvg", sourceFile, "-o", outputFile]];
      case "latex":
        return [this.pluginSettings.pdflatexPath, ["-shell-escape", "-output-directory", this.getTempDir(type), sourceFile]];
      case "ditaa":
        return [this.pluginSettings.ditaaPath, [sourceFile, "--transparent", "--svg", "--overwrite"]];
      case "blockdiag":
        return [this.pluginSettings.blockdiagPath, ["--antialias", "-Tsvg", sourceFile, "-o", outputFile]];
    }
  }
  spawnProcess(cmdPath, parameters) {
    return new Promise((resolve, reject) => {
      console.debug(`Starting external process ${cmdPath}, ${parameters}`);
      const process = (0, import_child_process.spawn)(cmdPath, parameters);
      let errData = "";
      process.stderr.on("data", (data) => {
        errData += data;
      });
      process.on("error", (err) => reject(`"${cmdPath} ${parameters}" failed, ${err}`));
      process.stdin.end();
      process.on("exit", (code) => {
        if (code !== 0) {
          return reject(`"${cmdPath} ${parameters}" failed, error code: ${code}, stderr: ${errData}`);
        }
        resolve("ok");
      });
    });
  }
  writeRenderedFile(sourceFile, outputFile, type) {
    return __async(this, null, function* () {
      const [cmdPath, params] = this.getRendererParameters(type, sourceFile, outputFile);
      yield this.spawnProcess(cmdPath, params);
      if (type === "latex") {
        yield this.spawnProcess(this.pluginSettings.pdf2svgPath, [`${sourceFile}.pdf`, outputFile]);
      }
      const imageData = this.makeDynamicSvg(fs.readFileSync(outputFile).toString());
      fs.unlinkSync(outputFile);
      fs.writeFileSync(outputFile, imageData);
      return outputFile;
    });
  }
  getTempDir(type) {
    return path.join(os.tmpdir(), `obsidian-${type}`);
  }
  makeDynamicSvg(svg_source) {
    for (const [color, target_var] of svgColorMap) {
      svg_source = svg_source.replaceAll(`"${color}"`, `"var(${target_var})"`);
    }
    return svg_source;
  }
  parseFrontMatter(source, outputFile) {
    if (source.startsWith("---")) {
      const lastIndex = source.indexOf("---", 3);
      const frontMatter = source.substring(source.indexOf("---") + 3, lastIndex);
      const parameters = frontMatter.trim().split("\n");
      for (const parameter of parameters) {
        const parameter_split = parameter.split(":");
        const parameter_name = parameter_split[0].trim();
        const parameter_value = parameter_split[1].trim();
        switch (parameter_name) {
          case "ref-name":
            this.referenceGraphMap.set(parameter_value, outputFile);
        }
      }
      return source.substring(lastIndex + 3);
    }
    return source;
  }
  convertToImage(type, source) {
    return __async(this, null, function* () {
      if (type === "refgraph") {
        return this.referenceGraphMap.get(source.trim());
      }
      const temp_dir = this.getTempDir(type);
      const graph_hash = md5(source);
      const inputFile = path.join(temp_dir, graph_hash);
      const outputFile = `${inputFile}.svg`;
      if (!fs.existsSync(temp_dir)) {
        fs.mkdirSync(temp_dir);
      }
      source = this.parseFrontMatter(source, outputFile);
      if (!fs.existsSync(inputFile)) {
        fs.writeFileSync(inputFile, source);
      } else if (fs.existsSync(outputFile)) {
        return outputFile;
      }
      return this.writeRenderedFile(inputFile, outputFile, type);
    });
  }
  imageProcessor(source, el, _, type) {
    return __async(this, null, function* () {
      try {
        console.debug(`Call image processor for ${type}`);
        const imagePath = yield this.convertToImage(type, source.trim());
        el.classList.add("multi-graph-normal");
        el.innerHTML = fs.readFileSync(imagePath).toString();
      } catch (errMessage) {
        console.error("convert to image error: " + errMessage);
        const pre = document.createElement("pre");
        const code = document.createElement("code");
        code.setText(errMessage);
        pre.appendChild(code);
        el.appendChild(pre);
      }
    });
  }
  refgraphProcessor(source, el, _) {
    return __async(this, null, function* () {
      return this.imageProcessor(source, el, _, "refgraph");
    });
  }
  blockdiagProcessor(source, el, _) {
    return __async(this, null, function* () {
      return this.imageProcessor(source, el, _, "blockdiag");
    });
  }
  ditaaProcessor(source, el, _) {
    return __async(this, null, function* () {
      return this.imageProcessor(source, el, _, "ditaa");
    });
  }
  dotProcessor(source, el, _) {
    return __async(this, null, function* () {
      return this.imageProcessor(source, el, _, "dot");
    });
  }
  latexProcessor(source, el, _) {
    return __async(this, null, function* () {
      return this.imageProcessor(source, el, _, "latex");
    });
  }
};

// src/main.ts
var GraphvizPlugin = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.debug("Load universal renderer plugin");
      yield this.loadSettings();
      this.addSettingTab(new GraphvizSettingsTab(this));
      const processors = new Processors(this);
      this.app.workspace.onLayoutReady(() => {
        for (const [type, func] of processors.renderTypeMapping) {
          this.registerMarkdownCodeBlockProcessor(type, func.bind(processors));
        }
      });
    });
  }
  onunload() {
    console.debug("Unload universal renderer plugin");
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
      return Promise.resolve();
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
