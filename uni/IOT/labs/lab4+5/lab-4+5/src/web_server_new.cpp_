/*
  Web Server

 A simple web server that shows the value of the analog input pins.
 using an Arduino Wiznet Ethernet shield.

 Circuit:
 * Ethernet shield attached to pins 10, 11, 12, 13
 * Analog inputs attached to pins A0 through A5 (optional)

 created 18 Dec 2009
 by David A. Mellis
 modified 9 Apr 2012
 by Tom Igoe
 modified 02 Sept 2015
 by Arturo Guadalupi

 */

#include <Ethernet.h>
#include <SPI.h>

// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = {
    0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0x14};
IPAddress ip(10, 21, 46, 68);
String myIp = "10.21.46.68";

// Initialize the Ethernet server library
// with the IP address and port you want to use
// (port 80 is default for HTTP):
EthernetServer server(80);

#define LED_PIN 1

void setup() {
    // You can use Ethernet.init(pin) to configure the CS pin
    // Ethernet.init(10);  // Most Arduino shields
    // Ethernet.init(5);   // MKR ETH shield
    // Ethernet.init(0);   // Teensy 2.0
    // Ethernet.init(20);  // Teensy++ 2.0
    // Ethernet.init(15);  // ESP8266 with Adafruit Featherwing Ethernet
    // Ethernet.init(33);  // ESP32 with Adafruit Featherwing Ethernet

    // Open serial communications and wait for port to open:
    Serial.begin(505000);
    while (!Serial) {
        ; // wait for serial port to connect. Needed for native USB port only
    }
    Serial.println("Ethernet WebServer Example");

    // start the Ethernet connection and the server:
    Ethernet.begin(mac, ip);

    // Check for Ethernet hardware present
    if (Ethernet.hardwareStatus() == EthernetNoHardware) {
        Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
        while (true) {
            delay(1); // do nothing, no point running without Ethernet hardware
        }
    }
    if (Ethernet.linkStatus() == LinkOFF) {
        Serial.println("Ethernet cable is not connected.");
    }

    // start the server
    server.begin();
    Serial.print("server is at ");
    Serial.println(Ethernet.localIP());

    pinMode(LED_PIN, OUTPUT);
    pinMode(LED_PIN, HIGH);
}

void loop() {
    // listen for incoming clients
    EthernetClient client = server.available();
    if (client) {
        Serial.println("\nnew client\n");
        // an http request ends with a blank line
        boolean currentLineIsBlank = true;
        String currentLine = "";
        while (client.connected()) {
            if (client.available()) {
                char c = client.read();
                // if you've gotten to the end of the line (received a newline
                // character) and the line is blank, the http request has ended,
                // so you can send a reply
                if (c == '\n' && currentLineIsBlank) {
                    // send a standard http response header
                    client.println("HTTP/1.1 200 OK");
                    client.println("Content-Type: text/html");
                    client.println("Connection: close"); // the connection will be closed after completion of the response
                    client.println("Refresh: 5");        // refresh the page automatically every 5 seconds
                    client.println();
                    client.println("<!DOCTYPE HTML>");
                    client.println("<html>");
                    // output the value of each analog input pin
                    for (int analogChannel = 1; analogChannel <= 3; analogChannel++) {
                        int sensorReading = analogRead(analogChannel);
                        client.print("Button on A");
                        client.print(analogChannel);
                        client.print(" is ");
                        client.print(sensorReading > 500 ? "UP" : "DOWN");
                        client.println("<br />");
                    }
                    client.println("<script> function ledOn() { fetch('http://" + myIp + "/ledOn'); } </script>");
                    client.println("<script> function ledOff() { fetch('http://" + myIp + "/ledOff'); } </script>");
                    client.println("<button onclick=\"ledOn()\">Launch the nuke</button>");
                    client.println("<button onclick=\"ledOff()\">Un-launch the nuke XD</button>");
                    client.println("<img src='https://static.wikia.nocookie.net/nicos-nextbots-fanmade/images/3/36/Goofy_Cat.png'>");
                    client.println("</html>");
                    break;
                }
                if (c == '\n') {
                    // you're starting a new line
                    currentLineIsBlank = true;
                    Serial.println(currentLine.c_str());
                    if (currentLine.startsWith("GET /ledOn")) {
                        digitalWrite(LED_PIN, HIGH);
                        Serial.println("Turning on led");
                    } else if (currentLine.startsWith("GET /ledOff")) {
                        digitalWrite(LED_PIN, LOW);
                        Serial.println("Turning off led");
                    }
                    currentLine = "";
                } else if (c != '\r') {
                    // you've gotten a character on the current line
                    currentLineIsBlank = false;
                    currentLine += c;
                }
            }
        }
        // give the web browser time to receive the data
        delay(1);
        // close the connection:
        client.stop();
        Serial.println("\nclient disconnected\n");
    }
}